
[globals]
QUEUE_701=sales
QUEUE_700=care

[default]
exten => 500,hint,SIP/500
exten => 600,hint,SIP/600
exten => 700,hint,SIP/700

[devices]
; inbound call
exten => GOIP2,1,NoOp(Incoming Call)
same => n,Answer()
same => n,Queue(support,,,,120)
same => n,Hangup()

exten => _0X.,1,NoOp(calling using GOIP Trunk)
same => n,NoOp(${EXTEN})
; same => n,Stasis(hello-world)
same => n,Stasis(hello-world,dialed,SIP/${EXTEN}@GOIP2)
same => n,Hangup()
same => n,Dial(SIP/${EXTEN}@GOIP2)
same => n,Hangup()

exten => 1000,1,NoOp()
 same => n,Answer()
 same => n,Stasis(hello-world)
;  same => n,Dial(SIP/500)
 same => n,Hangup()

exten => 500,1,NoOp(Calling 500)
same => n,NoOp(Dialing)
same => n,Answer()
;same => n,Stasis(hello-world)
; same => n,Stasis(channel-dump)
Â same => n,Stasis(Super-Conference,100)
same => n,Dial(SIP/500)
same => n,Hangup()

exten => 600,1,NoOp(Calling 600)
same => n,NoOp(Dialing)
same => n,Dial(SIP/600)
same => n,Hangup()

exten => 700,1,NoOp(Calling 700)
same => n,NoOp(Dialing)
same => n,Dial(SIP/700)
same => n,Hangup()


; ### Joining a Confrenece ### 
exten => 1,1,Answer()
exten => 1,n,ConfBridge(1)

exten => 2,1,Answer()
;conference number 2,default Bridge Profile,User Profile,Conference Menu
same => n,ConfBridge(2,default_bridge,agent_user)

; ...............................................................................................................................................

exten => _7XX,1,Verbose(2,Call queue as configured in the QUEUE_${EXTEN} global variable)
same => n,Set(thisQueue=${GLOBAL(QUEUE_${EXTEN})})
same => n,GotoIf($["${thisQueue}" = ""]?invalid_queue,1)
same => n,Verbose(2, --> Entering the ${thisQueue} queue)
same => n,Queue(${thisQueue})
same => n,Hangup()
 
exten => invalid_queue,1,Verbose(2,Attempted to enter invalid queue)
same => n,Playback(silence/1&invalid)
same => n,Hangup()

; ...............................................................................................................................................

exten => _*7XX,1,Set(xtn=${EXTEN:1})                        
same => n,Goto(queueLoginLogout,member_check,1) 

; ### Pause and Unpause a Queue ### 
; _*0[01]! pattern match will match on *00 and *01 plus 0 or more digits.
exten => _*0[01]!,1,Verbose(2,Pausing or unpausing queue member from one or more queues)
exten => _*0[01]!,n,Set(xtn=${EXTEN:3})                                                         ; save the queue extension to 'xtn'
exten => _*0[01]!,n,Set(thisQueue=${GLOBAL(QUEUE_${xtn})})                                      ; get the queue name if available
exten => _*0[01]!,n,GotoIf($[${ISNULL(${thisQueue})} & ${EXISTS(${xtn})}]?invalid_queue,1)
exten => _*0[01]!,n,GotoIf($[${EXTEN:2:1} = 0]?pause,1:unpause,1)

; Unpause ourselves from one or more queues
exten => unpause,1,NoOp()
exten => unpause,n,UnpauseQueueMember(${thisQueue},SIP/${CHANNEL(peername)}) 
exten => unpause,n,GoSub(changePauseStatus,start,1(UPQMSTATUS,UNPAUSED,available))    
exten => unpause,n,Hangup()

; Pause ourselves in one or more queues
exten => pause,1,NoOp()
exten => pause,n,PauseQueueMember(${thisQueue},SIP/${CHANNEL(peername)})
exten => pause,n,GoSub(changePauseStatus,start,1(PQMSTATUS,PAUSED,unavailable))
exten => pause,n,Hangup()

; ...........................................................................................................................

[queueLoginLogout]
exten => member_check,1,Verbose(2,Logging queue member in or out of the request queue)
same => n,Set(thisQueue=${GLOBAL(QUEUE_${xtn})})                  
same => n,Set(queueMembers=${QUEUE_MEMBER_LIST(${thisQueue})}) 
same => n,Set(thisActiveMember=SIP/${CHANNEL(peername)})          
same => n,GotoIf($["${queueMembers}" = ""]?q_login,1)         
same => n,Set(field=1)                                            ; start our field counter at one
same => n,Set(logged_in=0)                                        ; initialize 'logged_in' to "not logged in"
same => n,Set(thisQueueMember=${CUT(queueMembers,\,,${field})})
same => n,While($[${EXISTS(${thisQueueMember})}])  
same => n,GotoIf($["${thisQueueMember}" != "${thisActiveMember}"]?check_next)
same => n,Set(logged_in=1)                                                        ; if we got here, set as logged in
same => n,ExitWhile()  
same => n(check_next),Set(field=$[${field} + 1])                                  ; if we got here, increase counter
same => n,Set(thisQueueMember=${CUT(queueMembers,\,,${field})})                   ; get next member in the list
same => n,EndWhile()    
same => n,GotoIf($[${logged_in} = 0]?q_login,1:q_logout,1)  

; ### Login queue member ###
exten => q_login,1,Verbose(2,Logging ${thisActiveMember} into the ${thisQueue} queue)
exten => q_login,n,AddQueueMember(${thisQueue},${thisActiveMember})                     ; login our active device to the queue
exten => q_login,n,Playback(silence/1)  ; answer the channel by playing one second of silence
exten => q_login,n,ExecIf($["${AQMSTATUS}" = "ADDED"]?Playback(agent-loginok):Playback(an-error-has-occurred))
exten => q_login,n,Hangup()

; ### Logout queue member ###
exten => q_logout,1,Verbose(2,Logging ${thisActiveMember} out of ${thisQueue} queue)
exten => q_logout,n,RemoveQueueMember(${thisQueue},${thisActiveMember})
exten => q_logout,n,Playback(silence/1)
exten => q_logout,n,ExecIf($["${RQMSTATUS}" = "REMOVED"]?Playback(agent-loggedoff):Playback(an-error-has-occurred))
exten => q_logout,n,Hangup()

; ### Check for  queue variables info ### 
exten => show_variables,1,NoOp()
same => n,Noop(${QUEUE_VARIABLES(thisQueue)})
same => n,Verbose(0,strategy = ${QUEUESTRATEGY})
same => n,Verbose(0,calls = ${QUEUECALLS})
same => n,Hangup()

; .........................................................................................................................

; ### Subroutine we use to check pausing and unpausing status ###
[changePauseStatus]
; ARG1:  variable name to check, such as PQMSTATUS and UPQMSTATUS (PauseQueueMemberStatus / UnpauseQueueMemberStatus)
; ARG2:  value to check for, such as PAUSED or UNPAUSED
; ARG3:  file to play back if our variable value matched the value to check for
exten => start,1,NoOp()
exten => start,n,Playback(silence/1)  
exten => start,n,Playback(${IF($["${${ARG1}}" = "${ARG2}"]?${ARG3}:not-yet-connected)}) 
                         ;$["${PQMSTATUS}" = "PAUSED"]?unavailable:not-yet-connected
exten => start,n,GotoIf($[${ISNULL(${xtn})}]?end)       ; if ${xtn} is null, then just Return()
exten => start,n,Playback(in-the-queue)                 ;   if not null, then playback "in the queue"
exten => start,n,SayNumber(${xtn})                      ;   and the queue number that we (un)paused from
exten => start,n(end),Return()                            

[phones]

exten => 100,1,NoOp(Calling Saiba)
;same => n,NoOp(${CALLERID(name)})
same => n,Set(CDR(userfield)=Michael Saiba)
same => n,Dial(SIP/saiba,15)
same => n,GotoIf($[ "${DIALSTATUS}" = "BUSY" ]?100b,1)
same => n,VoiceMail(${EXTEN},u)
same => n,Hangup()

exten => *100,1,NoOP(Check for Saiba's voicemail)
same => n,VoiceMailMain(${EXTEN:1})
same => n,Hangup()

exten => 100b,1,NoOp(Play_busy playback and go to voicemail) 
same => n,VoiceMail(${EXTEN:0:3},b)
same => n,Hangup()

;...................................................................

exten => 200,1,NoOp(Calling Demo)
same => n,NoOp(Dialing)
same => n,Dial(SIP/demo,5)
same => n,VoiceMail(${EXTEN})
same => n,Hangup()

exten => *200,1,NoOP(Check for Demo's voicemail)
same => n,VoiceMailMain(${EXTEN:1})
same => n,Hangup()

; exten => *200,1,NoOP(Simulate Busy_Dial_Status)
; same => n,Answer
; same => n,WaitExten
; same => n,Hangup()

; .........................................................................................

exten => 300,1,NoOp(Calling Felex)
same => n,NoOp(Dialing)
same => n,Dial(SIP/felex,5)
same => n,VoiceMail(300@default)
same => n,Hangup()

;............................................................................................

exten => _0X.,1,NoOp(calling using GOIP Trunk)
same => n,NoOp(${EXTEN})
same => n,GoSub(subroutines,Time,1)
same => n,Dial(SIP/${EXTEN}@GOIP2)
same => n,Hangup()

exten => _254X.,1,NoOp(calling out on line 2)
same => n,NoOP(${EXTEN})
same => n,Dial(SIP/${EXTEN:3}@GOIP2)
same => n,Hangup()

;.......................................................................................

exten => 111,1,NoOp(Support line)
same => n,Answer()
same => n,Queue(support,,,,120)
;same => n,Dial(SIP/demo&SIP/saiba,120)
same => n,Hangup()


exten => 999,1,NoOp(Join Login_Queue)
same => n,AddQueueMember(login,SIP/${CALLERID(name)})
same => n,Playback(beep)

;......................................................................................

exten => *1000,1,NoOP(Check Saiba in dynamic queue)
same => n,Answer()
same => n,GotoIf(${REGEX("SIP/saiba",${DB(Queue/PersistentMembers/support)})}?*1000logout,1:*1000login,1)
same => n,Hangup()

exten => *1000login,1,NoOP(Saiba doesn't exists, Login)
same => n,AddQueueMember(support,SIP/saiba)
same => n,Playback(beep)


exten => *1000logout,1,NoOP(Saiba Exists, Logout)
same => n,RemoveQueueMember(support,SIP/saiba)
same => n,Playback(beep)
same => n,Hangup()

;...................................................................................

exten => *2000,1,NoOP(Check Demo in dynamic queue)
same => n,GotoIf(${REGEX("SIP/saiba",${DB(Queue/PersistentMembers/support)})}?*1000logout,1:*1000login,1)
same => n,Hangup()

exten => *2000login,1,NoOP(Demo doesn't exists, Login)
same => n,AddQueueMember(support,SIP/demo)
same => n,Playback(beep)
same => n,Hangup()

exten => *2000logout,1,NoOP(Demo Exists, Logout)
same => n,RemoveQueueMember(support,SIP/demo)
same => n,Playback(beep)
same => n,Hangup()


[in]

exten => GOIP2,1,NoOp(Incoming Call)
;same => n,GotoIfTime(14:00-16:00,mon-fri,*,*?phones,300,1)
;same => n,Dial(SIP/saiba)
same => n,Answer()
same => n,Queue(support,,,,120)
same => n,Hangup()

[subroutines]

exten => Time,1,NoOp(Running checks from time subroutine)
same => n,GotoIfTime(13:00-17:00,mon-fri,*,*?ok,1)
same => n,GotoIfTime(8:00-12:00,sat-sat,*,*?ok,1)
same => n,GotoIfTime(23:58-23:59,sun-sun,*,*?ok,1)
same => n,Playback(what-time-it-is2)
same => n,Hangup()

exten => ok,1,Return


